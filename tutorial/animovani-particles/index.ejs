<%- include("../../includes/tutorial-page-start.ejs", { title: "Animování particles", activePage: "animovani-particles", pageDescription: "V tutoriálu si vyzkoušíme animaci particles ve Three.js." }) %>
    <h1 class="heading-primary u-mb-6">Animování particles</h1>
    <p class="paragraph u-mb-4">V části o particles jsem na konci psal, že jejich animaci necháme na později, protože jsme ještě neuměli programovat shadery. Ty již z minulé části programovat umíme (tedy alespoň nějaké základní) a můžeme si tedy animaci particles vyzkoušet.</p>
    <h2 id="startovni-kod" class="heading-secondary u-mb-2">Startovní kód</h2>
    <p class="paragraph u-mb-2">Jako vždy je tu pro vás připravený startovní kód. Pomocí startovního kódu o Webpacku si vytvořte nový projekt a do JavaScript souboru zkopírujte kód z následující ukázky. Tento kód zatím jen vytváří prázdnou scénu a OrbitControls ovládání, abychom se mohli po scéně pohybovat.</p>
    <pre class="code-box u-mb-2"><code>import './style.css';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

// vytvoření scény
const scene = new THREE.Scene();

// vytvoření kamery
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 3;
scene.add(camera);

// vytvoření rendereru
const renderer = new THREE.WebGLRenderer({
    canvas: document.getElementById("WebGLCanvas")
});
// nastavení velikosti canvasu a pixel ratio
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

// přidání event listeneru pro změnu velikosti okna
window.addEventListener("resize", () => {
    // aktualizace poměru stran kamery
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    // změnění velikosti canvasu a pixel ratio
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
});

// vytvoření OrbitControls ovládání
const controls = new OrbitControls(camera, renderer.domElement);
// zapnutí tlumení při posunutí
controls.enableDamping = true;

// tato funkce je volána každý frame
function tick() {
    // aktualizace OrbitControls ovládání
    controls.update();
    // vyrenderování scény na canvas
    renderer.render(scene, camera);
}

// nastavení animační smyčky
// - funkce tick se bude volat každý frame
renderer.setAnimationLoop(tick);</code></pre>
    <p class="paragraph u-mb-2">Protože canvas roztahujeme přes celou velikost okna prohlížeče, tak si ještě zkopírujte následující CSS styly, pomocí kterých se zbavíte defaultních marginů a paddingů.</p>
    <pre class="code-box u-mb-2"><code>*, *::before, *::after {
    padding: 0;
    margin: 0;
}

body {
    overflow: hidden;
}</code></pre>
    <p class="paragraph u-mb-2">Jelikož budeme programovat shadery, tak je budeme chtít psát do samostatných souborů. Nainstalujeme si tedy raw-loader, který jsme používali i v minulé části, abychom to nemuseli dělat později.</p>
    <pre class="code-box code-box--command u-mb-2"><code>npm install raw-loader --save-dev</code></pre>
    <p class="paragraph u-mb-2">Po instalaci si jej můžeme nakonfigurovat v souboru webpack.common.js, jak ukazuje následující ukázka.</p>
    <pre class="code-box u-mb-2"><code>const CopyPlugin = require("copy-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");

module.exports = {
    entry: "./src/main.js",
    output: {
        path: path.resolve(__dirname, "dist"),
        clean: true
    },
    module: {
        rules: [
            {
                test: /\.glsl$/i,
                exclude: /node_modules/,
                use: "raw-loader"
            }
        ]
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: "./src/index.html"
        }),
        new CopyPlugin({
            patterns: [
                {
                    from: path.resolve(__dirname, "static").replace(/\\/g, "/"),
                    to: path.resolve(__dirname, "dist", "static"),
                    noErrorOnMissing: true
                }
            ]
        })
    ]
}</code></pre>
    <p class="paragraph u-mb-4">Po spuštění aplikace zatím neuvidíte nic.</p>
    <h2 id="vytvoreni-geometrie-pro-particles" class="heading-secondary u-mb-2">Vytvoření geometrie pro particles</h2>
    <p class="paragraph u-mb-2">Jako první si vytvoříme pro particles geometrii a nastavíme jí attributy position a color. Z části o particles již víte jak to udělat nebo si to tam můžete najít. Rozhodně se nic neučte nazpamět, ale snažte se to pochopit. Najít si to můžete v tomto tutoriálu nebo někde jinde vždy. Z minulé části, která byla o shaderech, víte, že attributy slouží k uchování dat, která jsou pro každý vertex jiná. Následující ukázka kódu ukazuje, jak můžeme geometrii pro particles vytvořit a nastavit attributy position a color. Je to okomentované a pochopíte to tam lépe, než kdybych to tu popisoval v textu.</p>
    <pre class="code-box u-mb-4"><code>/* ... */

// počet částic
const PARTICLES_COUNT = 100;

// vytvoření geometrie pro particles
const geometry = new THREE.BufferGeometry();

// vytvoření pole pozic pro vertexy
// - každý vertex má pro pozici 3 hodnoty (x, y, z)
const positions = new Float32Array(PARTICLES_COUNT * 3);
// vytvoření pole barev pro vertexy
// - každý vertex má pro barvu 3 hodnoty (red, green, blue)
const colors = new Float32Array(PARTICLES_COUNT * 3);

// naplnění pole pozic a pole barev pro vertexy náhodnými hodnotami
for (let i = 0; i &lt; positions.length; i++) {
    positions[i] = (Math.random() - 0.5) * 10;
    colors[i] = Math.random();
}

// vytvoření buffer attributu pro pozice vertexů
// (každý vertex má pro pozici 3 hodnoty - x, y, z)
const positionAttribute = new THREE.BufferAttribute(positions, 3);
// vytvoření buffer attributu pro barvy vertexů
// (každý vertex má pro barvu 3 hodnoty - red, green, blue)
const colorAttribute = new THREE.BufferAttribute(colors, 3);

// nastavení position atributu na geometrii
geometry.setAttribute("position", positionAttribute);
// nastavení color atributu na geometrii
geometry.setAttribute("color", colorAttribute);</code></pre>
    <h2 id="vytvoreni-materialu-pro-particles" class="heading-secondary u-mb-2">Vytvoření materiálu pro particles</h2>
    <p class="paragraph u-mb-2">Teď když máme geometrii, tak pro ni můžeme vytvořit materiál. V části o particles jsme používali <a href="https://threejs.org/docs/index.html?q=material#api/en/materials/PointsMaterial" target="_blank" class="link">PointsMaterial</a>. Jelikož ale budeme chtít particles animovat pomocí shaderů, vytvoříme si pro ně vlastní materiál. Začneme tím, že si pro shadery vytvoříme ve složce src samostatné soubory jménem vertex.glsl a fragment.glsl. Do souboru vertex.glsl vložte zatím následující základní kód pro vertex shader, který potom upravíme. Budeme používat ShaderMaterial, takže není potřeba deklarovat uniforms a attributy.</p>
    <pre class="code-box u-mb-2"><code>void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;
}</code></pre>
    <p class="paragraph u-mb-2">Do fragment shaderu zatím zkopírujte následující kód. Později jej upravíme.</p>
    <pre class="code-box u-mb-2"><code>void main() {
    gl_FragColor = vec4(0, 1, 0, 1);
}</code></pre>
    <p class="paragraph u-mb-2">Teď si můžeme naše shadery naimportovat jako řetězce do našeho JavaScript souboru a vytvořit shader materiál. Následující ukázka ukazuje, jak je můžeme naimportovat.</p>
    <pre class="code-box u-mb-2"><code>import './style.css';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import vertexShader from './vertex.glsl';
import fragmentShader from './fragment.glsl';

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Po naimportování shaderů můžeme vytvořit <a href="https://threejs.org/docs/index.html?q=material#api/en/materials/ShaderMaterial" target="_blank" class="link">ShaderMaterial</a>. Poté můžeme vytvořit samotné particles pomocí třídy <a href="https://threejs.org/docs/index.html?q=Points#api/en/objects/Points" target="_blank" class="link">Points</a>, které stejně jako při vytváření Meshů předáme geometrii a materiál.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader
});

// vytvoření particles
const particles = new THREE.Points(geometry, material);
// přidání particles do scény
scene.add(particles);</code></pre>
    <p class="paragraph u-mb-4">Pokud si teď aplikaci spustíte, tak neuvidíte nic. U třídy <a href="https://threejs.org/docs/index.html?q=Points#api/en/objects/Points" target="_blank" class="link">Points</a> se totiž vykreslují vertexy, ne polygony jako u meshů. Budeme tedy muset naše shadery upravit.</p>
    <h2 id="zobrazeni-vertexu" class="heading-secondary u-mb-2">Zobrazení vertexů</h2>
    <p class="paragraph u-mb-2">Abychom mohli vertexy pomocí našich shaderů zobrazit podobně jako když jsme používali PointsMaterial, tak k tomu budeme muset ve vertex shaderu nastavovat kromě gl_Position i gl_PointSize. Tato proměnná určuje velikost vertexu. Nastavíme jej třeba na velikost 15.0.</p>
    <pre class="code-box u-mb-2"><code>void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    // nastavení velikosti vertexu
    gl_PointSize = 15.0;
}</code></pre>
    <p class="paragraph u-mb-2">Pokud si teď aplikaci spustíte, tak by jste již vertexy měli vidět.</p>
    <div data-example-id="1" class="u-mb-2"></div>
    <p class="paragraph u-mb-2">Naše vertexy mají vždy stejnou velikost a nezáleží na jejich vzdálenosti od kamery. To můžeme napravit tak, že můžeme při nastavování velikosti použít viewPosition. Následující ukázka to ukazuje. Vůbec nevím jak to funguje, ale funguje to. Já na programování shaderů nejsem žádný expert, umím jen základy.</p>
    <pre class="code-box u-mb-2"><code>void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    // nastavení velikosti vertexu
    gl_PointSize = 100.0 / -viewPosition.z;
}</code></pre>
    <p class="paragraph u-mb-2">Po spuštění aplikace by již vertexy měli mít jinou velikost v závislosti na jejich vzdálenosti od kamery.</p>
    <div data-example-id="2" class="u-mb-2"></div>
    <p class="paragraph u-mb-2">Způsobem, jakým momentálně v shaderu nastavujeme velikost vertexu, nebereme v potaz pixel ratio. Uživateli s větší hustotou pixelů se tedy vertexy zobrazí v menší velikosti. Proto musíme pixel ratio předat do shaderu jako uniform a použít jej při nastavování velikosti vertexu. Pixel ratio se dá získat i z rendereru pomocí metody getPixelRatio, jak ukazuje následující ukázka.</p>
    <pre class="code-box u-mb-2"><code>// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
        uPixelRatio: {
            value: renderer.getPixelRatio()
        }
    }
});</code></pre>
    <p class="paragraph u-mb-2">Po předání pixel ratio jako uniform jej můžeme při nastavování velikosti vertexu použít.</p>
    <pre class="code-box u-mb-2"><code>uniform float uPixelRatio;

void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    // nastavení velikosti vertexu
    gl_PointSize = (100.0 * uPixelRatio) / -viewPosition.z;
}</code></pre>
    <p class="paragraph u-mb-2">Teď by se již měli vertexy zobrazit s velikostí nezávislou na pixel ratio.</p>
    <div data-example-id="3" class="u-mb-4"></div>
    <h2 id="aplikovani-textury" class="heading-secondary u-mb-2">Aplikování textury</h2>
    <p class="paragraph u-mb-2">Teď si namísto vyrenderování obyčejného čtverce vyrenderujeme pro každou částici texturu. Budeme používat stejnou texturu jako v části o particles. Můžete si ji stáhnout <a href="../../static/img/textures/particles/star_particle.png" download class="link">zde</a> a umístit do složky static ve vašem projektu. Jedná se o texturu z <a href="https://kenney.nl/assets/particle-pack" target="_blank" class="link">tohoto particles balíčku</a>, který obsahuje spoustu particles, které můžeme použít ve vlastních projektech.</p>
    <p class="paragraph u-mb-2">Až si texturu stáhnete a umístíte do složky static, tak si ji můžeme načíst pomocí Texture Loaderu a poslat do shaderu jako uniform.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření TextureLoaderu
const textureLoader = new THREE.TextureLoader();
// načtení textury
const texture = textureLoader.load("./static/star_particle.png");


// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
        uPixelRatio: {
            value: renderer.getPixelRatio()
        },
        uTexture: { // předání textury jako uniform
            value: texture
        }
    }
});

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Texturu můžeme ve fragment shaderu použít a kontrolovat s její pomocí průhlednost. Jedná se vlastně o alpha mapu. Následující ukázka ukazuje, jak podle ní můžeme nastavovat průhlednost pomocí funkce texture2D.</p>
    <pre class="code-box u-mb-2"><code>uniform sampler2D uTexture;

void main() {
    gl_FragColor = vec4(0, 1, 0, texture2D(uTexture, gl_PointCoord).g);
}</code></pre>
    <p class="paragraph u-mb-2">V ukázce můžete vidět, že do funkce texture2D předáváme texturu (sampler2D) a gl_PointCoord. Proměnná gl_PointCoord uchovává UV souřadnice vertexu (jakoby UV souřadnice fragmentu na tom obdelníku vertexu). Podle toho tedy z textury získáváme barvu a používáme ji pro průhlednost. Používáme hodnotu zeleného kanálu. Nevím proč, jen vím že u PointsMaterialu se to tak také dělá. Viděl jsem to <a href="https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl.js" target="_blank" class="link">zde</a> ve zdrojovém kódu, takže jsem to tak také udělal a funguje to. Je to podle mě proto, že alpha mapa je černobílý obrázek a všechny hodnoty barevných kanálů jsou pro každý pixel stejné. Mohli bychom tedy pravděpodobně použít jakýkoliv kanál pro nastavení průhlednosti. Občas není na škodu se do zdrojového kódu podívat. Můžeme se tam naučit nebo zkopírovat spoustu věcí.</p>
    <p class="paragraph u-mb-2">Aby průhlednost fungovala, tak musíme ještě na materiálu nastavit vlastnost transparent na true.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
        uPixelRatio: {
            value: renderer.getPixelRatio()
        },
        uTexture: {
            value: texture
        }
    },
    transparent: true
});

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Pokud si teď aplikaci spustíte, tak uvidíte, že se textura pro částice aplikovala.</p>
    <div data-example-id="4" class="u-mb-2"></div>
    <p class="paragraph u-mb-2">Stejně jako v části o particles máme problém s průhledností. Občas se stane, že průhlednost překryje některé již nakreslené částice za vykreslovanou částicí. Tento problém můžeme vyřešit více způsoby. Popisovali jsme si je v části o particles. Mi to v tomto případě vyřešíme vypnutím zápisu do depth bufferu nastavením vlastnosti depthWrite na false, což je pravděpodobně většinou nejlepší řešení.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
        uPixelRatio: {
            value: renderer.getPixelRatio()
        },
        uTexture: {
            value: texture
        }
    },
    transparent: true,
    depthWrite: false
});

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Po vypnutí zápisu do depth bufferu by měl být problém s průhledností vyřešen.</p>
    <div data-example-id="5" class="u-mb-2"></div>
    <p class="paragraph u-mb-2">Naše particles mi přijdou moc malé. Můžeme je tedy o něco zvětšit změněním hodnoty pro nastavení velikosti vertexu ve vertex shaderu.</p>
    <pre class="code-box u-mb-4"><code>uniform float uPixelRatio;

void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    // nastavení velikosti vertexu
    gl_PointSize = (200.0 * uPixelRatio) / -viewPosition.z;
}</code></pre>
    <div data-example-id="6" class="u-mb-4"></div>
    <h2 id="pridani-barev" class="heading-secondary u-mb-2">Přidání barev</h2>
    <p class="paragraph u-mb-2">Texturu na našich částicích aplikovanou máme a teď nám ještě zbývá je obarvit podle barev vertexů. Poté si již budeme moci zkusit particles animovat.</p>
    <p class="paragraph u-mb-2">K barvám vertexů máme přístup přes attribut color. Attributy ale nemáme ve fragment shaderu k dispozici, ty se týkají jen vertexů. Proto si budeme muset vytvořit varying, přes který barvu vertexu do fragment shaderu předáme. Následující ukázka ukazuje, jak to můžeme udělat.</p>
    <pre class="code-box u-mb-2"><code>uniform float uPixelRatio;

attribute vec3 color;

// varying pro předání barvy vertexu do fragment shaderu
varying vec3 vColor;

void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    // nastavení velikosti vertexu
    gl_PointSize = (200.0 * uPixelRatio) / -viewPosition.z;

    // předání barvy vertexu do fragment shaderu
    vColor = color;
}</code></pre>
    <p class="paragraph u-mb-2">Ve fragment shaderu můžeme barvu vertexu použít a obarvit tak částici specifickou barvou.</p>
    <pre class="code-box u-mb-2"><code>uniform sampler2D uTexture;

varying vec3 vColor;

void main() {
    gl_FragColor = vec4(vColor, texture2D(uTexture, gl_PointCoord).g);
}</code></pre>
    <p class="paragraph u-mb-2">Po spuštění aplikace by jste měli vidět, že se částice obarvili.</p>
    <div data-example-id="7" class="u-mb-4"></div>
    <h2 id="animace" class="heading-secondary u-mb-2">Animace</h2>
    <p class="paragraph u-mb-2">Particles máme připravené a vykreslujeme je přes vlastní shadery. Myslím že animaci by jste si již byli schopni přidat sami, ale i přesto si to tu ukážeme. Animaci jde provádět různými způsoby. Princip je v tom, že předáváme do shaderu pomocí uniform nějakou hodnotu, kterou v JavaScript kódu aktualizujeme. Může to být třeba uplynulý čas od startu aplikace. Tuto hodnotu poté používáme třeba k nastavení pozice vertexů.</p>
    <p class="paragraph u-mb-2">V našem příkladu budeme do shaderu předávat uplynulý čas od startu aplikace. Takže si na to na materiálu nadeklarujeme uniform.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření ShaderMaterialu
const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
        uPixelRatio: {
            value: renderer.getPixelRatio()
        },
        uTexture: {
            value: texture
        },
        uElapsedTime: {
            value: 0
        }
    },
    transparent: true,
    depthWrite: false
});

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Uniform pro uplynulý čas budeme každý frame aktualizovat v naší tick funkci. Jak to udělat ukazuje následující ukázka. Jsou k tomu potřeba hodiny.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// vytvoření hodin
const clock = new THREE.Clock();

// tato funkce je volána každý frame
function tick() {
    // aktualizace OrbitControls ovládání
    controls.update();
    // aktualizace uniform pro uběhnutý čas
    material.uniforms.uElapsedTime.value = clock.getElapsedTime();
    // vyrenderování scény na canvas
    renderer.render(scene, camera);
}

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Teď můžeme uplynulý čas použít v našich shaderech. Použijeme jej ve vertex shaderu a budeme s jeho pomocí jednotlivé částice pohybovat. Je na vás jakým způsobem to budete dělat. Mi budeme částice pohybovat zleva do prava pomocí funkce sinus.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// uběhnutý čas od startu aplikace
uniform float uElapsedTime;

void main() {
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    vec4 viewPosition = viewMatrix * modelPosition;

    // změna pozice na ose X podle uběhnutého
    // času a pozice částice na ose Y
    viewPosition.x += sin(uElapsedTime+modelPosition.y);

    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    gl_PointSize = (200.0 * uPixelRatio) / -viewPosition.z;

    vColor = color;
}</code></pre>
    <p class="paragraph u-mb-2">V našem kódu posouváme částice na ose X vzhledem ke kameře. Takže se budou částice pohybovat zleva do prava v nezávislosti na tom, odkud se na ně díváme. K tomu vlastně viewPosition slouží. Můžeme nastavovat transformace vzhledem k pozici kamery, ale jinak nevím jak to funguje. Pokud si naši aplikaci spustíte, tak si můžete animaci prohlédnout.</p>
    <div data-example-id="8" class="u-mb-4"></div>
    <h2 id="modifikovani-points-materialu" class="heading-secondary u-mb-2">Modifikování Points Materialu</h2>
    <p class="paragraph u-mb-2">Pro animaci particles jsme si napsali vlastní shadery úplně od začátku. Viděli jste že to zas tak složité není a naučili jste se o shaderech pár dalších věcí. Jde ale také například modifikovat <a href="https://threejs.org/docs/index.html?q=material#api/en/materials/PointsMaterial" target="_blank" class="link">PointsMaterial</a> a můžeme tím pro animaci particles napsat méně kódu. Může být ale těžší se v shaderu pro PointsMaterial vyznat a najít místo, které se hodí přepsat. Pokud si kódy shaderů pro PointsMaterial otevřete, uvidíte kód, který ukazuje následující ukázka. K souboru s tímto kódem máte přístup ve zdrojovém kódu ve složce node_modules nebo v github repozitáři. Najdete jej ve složce src/renderers/shaders/ShaderLib/points.glsl.js.</p>
    <pre class="code-box language-javascript u-mb-2"><code>export const vertex = /* glsl */`
uniform float size;
uniform float scale;

#include &lt;common&gt;
#include &lt;color_pars_vertex&gt;
#include &lt;fog_pars_vertex&gt;
#include &lt;morphtarget_pars_vertex&gt;
#include &lt;logdepthbuf_pars_vertex&gt;
#include &lt;clipping_planes_pars_vertex&gt;

void main() {

    #include &lt;color_vertex&gt;
    #include &lt;morphcolor_vertex&gt;
    #include &lt;begin_vertex&gt;
    #include &lt;morphtarget_vertex&gt;
    #include &lt;project_vertex&gt;

    gl_PointSize = size;

    #ifdef USE_SIZEATTENUATION

        bool isPerspective = isPerspectiveMatrix( projectionMatrix );

        if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );

    #endif

    #include &lt;logdepthbuf_vertex&gt;
    #include &lt;clipping_planes_vertex&gt;
    #include &lt;worldpos_vertex&gt;
    #include &lt;fog_vertex&gt;

}
`;

export const fragment = /* glsl */`
uniform vec3 diffuse;
uniform float opacity;

#include &lt;common&gt;
#include &lt;color_pars_fragment&gt;
#include &lt;map_particle_pars_fragment&gt;
#include &lt;alphatest_pars_fragment&gt;
#include &lt;fog_pars_fragment&gt;
#include &lt;logdepthbuf_pars_fragment&gt;
#include &lt;clipping_planes_pars_fragment&gt;

void main() {

    #include &lt;clipping_planes_fragment&gt;

    vec3 outgoingLight = vec3( 0.0 );
    vec4 diffuseColor = vec4( diffuse, opacity );

    #include &lt;logdepthbuf_fragment&gt;
    #include &lt;map_particle_fragment&gt;
    #include &lt;color_fragment&gt;
    #include &lt;alphatest_fragment&gt;

    outgoingLight = diffuseColor.rgb;

    #include &lt;output_fragment&gt;
    #include &lt;tonemapping_fragment&gt;
    #include &lt;encodings_fragment&gt;
    #include &lt;fog_fragment&gt;
    #include &lt;premultiplied_alpha_fragment&gt;

}
`;</code></pre>
    <p class="paragraph u-mb-2">Jak můžete vidět, v souboru se exportuje kód pro vertex shader a kód pro fragment shader. Nás zajímá kód pro vertex shader. Můžete tam vidět, že se tam importuje kód ze spoustu jiných souborů pomocí příkazu #include. Tyto soubory je potřeba si projít a najít vhodné místo, kde můžeme umístit vlastní kód. Máte k nim přístup ve složce src/renderers/shaders/ShaderChunk.</p>
    <p class="paragraph u-mb-2">Mi si zkusíme v našem příkladu PointsMaterial modifikovat a vytvořit stejnou animaci, kterou jsme prováděli při používání vlastních shaderů. Kterou část kódu vertex shaderu je potřeba modifikovat jsem již zjistil za vás. Je to importovaná část pomocí #include s názvem project_vertex. Následující ukázka ukazuje její kód.</p>
    <pre class="code-box language-javascript u-mb-2"><code>export default /* glsl */`
vec4 mvPosition = vec4( transformed, 1.0 );

#ifdef USE_INSTANCING

    mvPosition = instanceMatrix * mvPosition;

#endif

mvPosition = modelViewMatrix * mvPosition;

gl_Position = projectionMatrix * mvPosition;
`;</code></pre>
    <p class="paragraph u-mb-2">V našem kódu si zakomentujte vytváření ShaderMaterialu a namísto toho vytvořte PointsMaterial, který zmodifikujte pomocí onBeforeCompile metody, jak ukazuje následující ukázka.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// // vytvoření ShaderMaterialu
// const material = new THREE.ShaderMaterial({
//     vertexShader: vertexShader,
//     fragmentShader: fragmentShader,
//     uniforms: {
//         uPixelRatio: {
//             value: renderer.getPixelRatio()
//         },
//         uTexture: {
//             value: texture
//         },
//         uElapsedTime: {
//             value: 0
//         }
//     },
//     transparent: true,
//     depthWrite: false
// });

// pomocí této proměnné budeme mít přístup
// k uniforms změněného shaderu
let uniforms;

// vytvoření PointsMaterialu
const material = new THREE.PointsMaterial({
    vertexColors: true,
    alphaMap: texture,
    transparent: true,
    depthWrite: false
});
// modifikování vytvořeného PointsMaterialu
material.onBeforeCompile = (shader) => {
    // přidání kódu pro animaci
    shader.vertexShader = shader.vertexShader.replace(
        "#include &lt;project_vertex&gt;",
        `
        vec4 mvPosition = vec4( transformed, 1.0 );

        #ifdef USE_INSTANCING

            mvPosition = instanceMatrix * mvPosition;

        #endif

        mvPosition = modelViewMatrix * mvPosition;

        // zde je řádek, který jsme do kódu přidali
        mvPosition.x += sin(uElapsedTime+transformed.y);

        gl_Position = projectionMatrix * mvPosition;
        `
    );
    // přidání uniform pro uběhnutý čas
    shader.vertexShader = "uniform float uElapsedTime; " + shader.vertexShader;
    shader.uniforms.uElapsedTime = {
        value: 0
    }
    // uložení reference k uniforms
    uniforms = shader.uniforms;
}

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Jak můžete v kódu, který předchozí ukázka ukazuje vidět, tak měníme řádek kódu pro vertex shader, který obsahuje text "#include &lt;project_vertex&gt;" za modifikovaný kód. Přidali jsme si tam řádek, pomocí kterého vertexy posouváme. Dále jsme si pro shader vytvořili uniform pro uběhnutý čas od startu aplikace, jelikož ji ve vertex shaderu používáme. K uniforms máme přístup pomocí shader.uniforms.</p>
    <p class="paragraph u-mb-2">Abychom uniform s uběhnutým časem mohli měnit v tick funkci, tak jsme si na konci onBeforeCompile funkce uložili objekt obsahující uniforms (odkaz na něj) do proměnné. Kód funkce tick tedy upravte do podoby, kterou ukazuje následující ukázka.</p>
    <pre class="code-box u-mb-2"><code>/* ... */

// tato funkce je volána každý frame
function tick() {
    // aktualizace OrbitControls ovládání
    controls.update();
    // aktualizace uniform pro uběhnutý čas
    if (uniforms) uniforms.uElapsedTime.value = clock.getElapsedTime();
    // vyrenderování scény na canvas
    renderer.render(scene, camera);
}

/* ... */</code></pre>
    <p class="paragraph u-mb-2">Když si teď aplikaci spustíte, tak se budou particles animovat úplně stejně, jako když jsme animaci prováděli ve vlastních shaderech.</p>
    <div data-example-id="9" class="u-mb-6"></div>
    <p class="paragraph u-mb-4">Pro tuto část je to vše. Nyní již víte, jak můžete své particles animovat. Jestli si pro particles budete psát vlastní shadery nebo budete modifikovat PointsMaterial je na vás. Obě možnosti mají své výhody a nevýhody.</p>
    <div class="u-center-text">
        <a href="../post-processing/" class="button-primary">Pokračovat</a>
    </div>
<%- include("../../includes/tutorial-page-end.ejs") %>